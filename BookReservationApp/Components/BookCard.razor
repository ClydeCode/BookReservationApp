@using BookReservationApp.Data.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject DatabaseService Database;
@inject IDialogService DialogService;

<MudCard Width="311px" Height="600px">
    <MudCardMedia Image=@ImageURL Height="375"/>
    <MudCardContent Style="height: 150px">
        <MudText Typo="Typo.h5" Style="margin-bottom: 5px">@Title</MudText>
        <MudText Typo="Typo.body2" Style=@($"color: {Colors.Grey.Darken1}")>@Description</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@BookmarkIcon" OnClick="ReserveToggle" Color="Color.Primary" aria-label="add to reservations"></MudIconButton>
        <MudIconButton Icon="@FavoriteIcon" OnClick="FavoriteToggle" Color="Color.Secondary" aria-label="add to favorite"></MudIconButton>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudIconButton Class="ml-auto" Icon="@Icons.Material.Filled.Edit" OnClick="HandleEditDialog" Color="Color.Info" aria-label="edit"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="HandleDeleteBox" Color="Color.Secondary" aria-label="delete"></MudIconButton>
            </Authorized>
        </AuthorizeView>
    </MudCardActions>
</MudCard>

<MudMessageBox @ref="DeleteMessageBox" Title="Attention!" CancelText="Cancel" Style="width: 500px">
    <MessageContent>
        Do you want to <b><i>delete</i></b> this book?
    </MessageContent>
    <YesButton>
        <MudButton Class="ml-2" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" OnClick="() => Database.DeleteBook(Id)">Delete</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string? ImageURL { get; set; }
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public string? ReservedBy { get; set; }
    [Parameter]
    public float TrackingNumber { get; set; }
    public bool IsFavorite { get; set; }

    string FavoriteIcon = Icons.Material.Filled.FavoriteBorder;
    string BookmarkIcon = Icons.Material.Filled.BookmarkBorder;

    MudMessageBox DeleteMessageBox { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private ClaimsPrincipal User { get; set; }
    private string UserId { get; set; }

    protected override void OnInitialized()
    {
        AuthenticateUser();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        IsFavorite = false;

        if (Database.GetFavoriteByIdAndUserId(Id, UserId) != null) IsFavorite = true;

        UpdateIcons();

        base.OnParametersSet();
    }

    async void AuthenticateUser()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User;

        UserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    void FavoriteToggle()
    {
        if (User.Identity.IsAuthenticated)
        {
            if (!IsFavorite)
            {
                Database.AddFavorite(new FavoriteModel { UserId = UserId, BookId = Id });

                IsFavorite = true;
            }
            else
            {
                Database.DeleteFavoriteByIdAndUserId(Id, UserId);

                IsFavorite = false;
            }
            UpdateIcons();
        }
    }

    void ReserveToggle()
    {
        if (User.Identity.IsAuthenticated)
        {
            if (ReservedBy == null)
            {
                var entity = Database.GetBookById(Id);

                entity.ReservedBy = UserId;

                Database.UpdateBook(Id, entity);

                ReservedBy = UserId;
            }
            else if (ReservedBy == UserId)
            {
                var entity = Database.GetBookById(Id);

                entity.ReservedBy = null;

                Database.UpdateBook(Id, entity);

                ReservedBy = null;
            }
            UpdateIcons();
        }
    }

    void UpdateIcons()
    {
        FavoriteIcon = IsFavorite == false ?
            Icons.Material.Filled.FavoriteBorder : Icons.Material.Filled.Favorite;

        BookmarkIcon = ReservedBy == null ?
            Icons.Material.Filled.BookmarkBorder : ReservedBy == UserId ?
                Icons.Material.Filled.Bookmark : Icons.Material.Filled.Bookmarks;
    }

    async void HandleEditDialog()
    {
        var Book = new BookModel
        {
            Id = Id,
            ImageURL = ImageURL,
            Title = Title,
            Description = Description
        };

        var parameters = new DialogParameters { ["Book"] = Book };

        var dialog = await DialogService.ShowAsync<EditBookDialog>("Edit Book", parameters);
        var result = await dialog.Result;
    }

    async void HandleDeleteBox()
    {
        await DeleteMessageBox.Show();
    }
}