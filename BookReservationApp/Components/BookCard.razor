@using BookReservationApp.Data.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ContextDb> DBFactory

<MudCard Width="300px">
    <MudCardMedia Image=@ImageURL Height="200"/>
    <MudCardContent>
        <MudText Typo="Typo.h5">@Title</MudText>
        <MudText Typo="Typo.body2">@Description</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon="@_bookmarkIcon" OnClick="ReserveToggle" Color="Color.Primary" aria-label="add to reservations"></MudIconButton>
        <MudIconButton Icon="@_favoriteIcon" OnClick="FavoriteToggle" Color="Color.Secondary" aria-label="add to favorite"></MudIconButton>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudIconButton OnClick="OnButtonClicked" Color="Color.Secondary" aria-label="delete">x</MudIconButton>
            </Authorized>
        </AuthorizeView>
    </MudCardActions>
</MudCard>

<MudMessageBox @ref="mbox" Title="Ispėjimas" CancelText="Cancel" Style="width: 500px">
    <MessageContent>
        Ar tikrai <b><i>norite</i></b> ištrinti?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Ištrinti</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string? ImageURL { get; set; }
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public string? ReservedBy { get; set; }

    string _favoriteIcon = Icons.Material.Filled.FavoriteBorder;
    string _bookmarkIcon = Icons.Material.Filled.BookmarkBorder;

    MudMessageBox mbox { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ClaimsPrincipal user { get; set; }
    private string userId { get; set; }

    protected override void OnInitialized()
    {
        AuthenticateUser();

        _bookmarkIcon = ReservedBy == null ?
            Icons.Material.Filled.BookmarkBorder : ReservedBy == userId ?
                Icons.Material.Filled.Bookmark : Icons.Material.Filled.Bookmarks;

        base.OnInitialized();
    }

    async void AuthenticateUser()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    void FavoriteToggle()
    {
        if (user.Identity.IsAuthenticated)
        {
            _favoriteIcon = _favoriteIcon == Icons.Material.Filled.FavoriteBorder 
                ? Icons.Material.Filled.Favorite : Icons.Material.Filled.FavoriteBorder;
        }
    }

    async void ReserveToggle()
    {
        if (user.Identity.IsAuthenticated)
        {
            using var context = DBFactory.CreateDbContext();

            if (ReservedBy == null)
            {
                var entity = context.Books.FirstOrDefault(item => item.Id == Id);

                context.Entry(entity).CurrentValues.SetValues(entity.ReservedBy = userId);

                context.SaveChanges();

                ReservedBy = userId;
                _bookmarkIcon = Icons.Material.Filled.Bookmark;
            }
            else if (ReservedBy == userId)
            {
                var entity = context.Books.FirstOrDefault(item => item.Id == Id);

                var entry = context.Entry(entity).CurrentValues;

                entity.ReservedBy = null;

                entry.SetValues(entity);

                context.SaveChanges();

                ReservedBy = null;
                _bookmarkIcon = Icons.Material.Filled.BookmarkBorder;
            }
        }
    }

    async void OnButtonClicked()
    {
        await mbox.Show();

        using var context = DBFactory.CreateDbContext();

        var entity = context.Books.FirstOrDefault(item => item.Id == Id);

        context.Books.Remove(entity);

        context.SaveChanges();
    }
}