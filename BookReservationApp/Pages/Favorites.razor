@page "/favorites"
@using BookReservationApp.Pages.Account;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using BookReservationApp.Components;
@using BookReservationApp.Data.Models;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<ContextDb> DBFactory;

<CascadingAuthenticationState>
	<AuthorizeView>
		<Authorized>
			<MudText Typo="Typo.h4" Class="pb-3">Favorites</MudText>
			<MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column">
				<Pagination Books="@Books" />
			</MudContainer>
		</Authorized>
		<NotAuthorized>
			<RedirectToLogin />
		</NotAuthorized>
	</AuthorizeView>
</CascadingAuthenticationState>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }
	private ClaimsPrincipal User { get; set; }

	public List<BookModel>? Books;

	protected override async Task OnInitializedAsync()
	{
		AuthenticateUser();

		var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

		using var context = DBFactory.CreateDbContext();

		if (context is not null && context.Books is not null)
			Books = context.Books
				.Include(x => x.Favorite)
				.Where(x => x.Favorite.UserId == userId && x.Favorite.BookId == x.Id)
				.ToList();

		await base.OnInitializedAsync();
	}

	async void AuthenticateUser()
	{
		var authState = await AuthenticationStateTask;
		User = authState.User;
	}
}